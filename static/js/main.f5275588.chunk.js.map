{"version":3,"sources":["App.styles.ts","data/categories.ts","data/items.ts","helpers/dateFilter.ts","components/TableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/InfoArea/styles.ts","components/ResumeItem/styles.ts","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/InputArea/styles.ts","components/InputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","categories","food","title","color","expense","rent","salary","items","date","Date","category","value","formatDate","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","props","width","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","toFixed","InfoArea","onMonthChange","income","onClick","currentDate","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","i","filterListByMonth","incomeCount","expenseCount","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5275588.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div``;\n\nexport const Header = styled.div`\n    background-color: darkblue;\n    height: 150px;\n    text-align:center;\n`;\n\nexport const HeaderText = styled.h1`\n    margin: 0;\n    padding: 0;\n    color: #FFF;\n    padding-top:30px;\n`;\n\nexport const Body = styled.div`\n    margin: auto;\n    max-width: 980px;\n    margin-bottom: 50px;\n`;\n","import {Category} from '../types/Category'\n\n\nexport const categories:Category = {\n    food: { title: 'Alimentação', color: 'blue', expense: true},\n    rent: { title: 'Aluguel', color: 'brown', expense: true},\n    salary: { title: 'Salário', color: 'green', expense: false},\n}","import {Item} from '../types/Item'\n\nexport const items: Item[] = [\n    { date: new Date(2021, 10, 15), category: 'food', title: 'McDonalds', value: 32.12 },\n    { date: new Date(2021, 10, 15), category: 'food', title: 'Burguer King', value: 28 },\n    { date: new Date(2021, 10, 16), category: 'rent', title: 'Alguel Apt', value: 2300 },\n    { date: new Date(2021, 11, 18), category: 'salary', title: 'Salário ACME', value: 4500 },\n];","import { Item } from '../types/Item'\n\nexport const getCurrentMonth = () => {\n    let now = new Date()\n    return `${now.getFullYear()}-${now.getMonth() + 1}`;\n}\n\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\n    let newList: Item[] = [];\n    let [year, month] = date.split('-');\n\n    for (let i in list) {\n\n        if (\n            list[i].date.getFullYear() === parseInt(year) &&\n            (list[i].date.getMonth() + 1) === parseInt(month)\n        ) {\n            newList.push(list[i])\n        }\n    }\n\n    return newList;\n}\n\nexport const formatDate = (date: Date): string => {\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n\n\n    return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\n}\n\n\nconst addZeroToDate = (n: number): string => n < 10 ? `0${n}` : `${n}`\n\n\nexport const formatCurrentMonth = (currentMonth:string):string => {\n    let [year,month] = currentMonth.split('-')\n\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']\n\n    return `${months[parseInt(month) - 1]} de ${year}`\n}","import styled from \"styled-components\";\n\nexport const Table = styled.table`\n\n    width: 100%;\n    background-color: #FFF;\n    padding:20px;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    margin-top: 20px;\n\n`;\n\n\n\nexport const TableHeadColumn = styled.th<{width?:number}>`\n    width: ${props => props.width ? `${props.width}px` : 'auto'};\n    padding: 10px 0;\n    text-align:left;   \n`;","import styled from \"styled-components\";\n\nexport const TableLine = styled.tr``;\n\nexport const TableColumn = styled.td`\n    padding: 10px 0;\n`;\n\nexport const Category = styled.div<{ color: string }>`\n    display: inline-block;\n    padding: 5px 10px;\n    border-radius: 5px;\n    color: #FFF;\n    background: ${props => props.color};\n`\n\nexport const Value = styled.div<{ color:string }>`\n    color:${props => props.color};\n    padding:10px;\n\n`","import * as C from './styles'\nimport { Item } from '../../types/Item'\n\nimport { formatDate } from '../../helpers/dateFilter'\nimport { categories } from '../../data/categories'\n\ntype Props = {\n    item: Item;\n}\n\n\nexport const TableItem = ({ item }: Props) => {\n    return (\n        <C.TableLine>\n            <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\n            <C.TableColumn>\n                <C.Category color={categories[item.category].color}>\n                    {categories[item.category].title}\n                </C.Category>\n            </C.TableColumn>\n            <C.TableColumn>{item.title}</C.TableColumn>\n            <C.TableColumn>\n                <C.Value color={categories[item.category].expense ? 'red' : 'green'}>\n                    R${item.value}\n                </C.Value>\n            </C.TableColumn>\n        </C.TableLine>\n    );\n}","import * as C from './styles'\nimport {Item} from '../../types/Item'\nimport {TableItem} from '../TableItem'\n\n\ntype Props={\n    list: Item[];\n}\n\nexport const TableArea = ({list}: Props) => {\n    return(\n        <C.Table>\n            <thead>\n                <tr>\n                    <C.TableHeadColumn width={100}>Data</C.TableHeadColumn>\n                    <C.TableHeadColumn width={130}>Categoria</C.TableHeadColumn>\n                    <C.TableHeadColumn>Título</C.TableHeadColumn>\n                    <C.TableHeadColumn width={150}>Valor</C.TableHeadColumn>\n                </tr>\n            </thead>\n\n            <tbody>\n                {list.map((item,index) => (\n                    <TableItem key={index} item={item}/>\n                ))}\n            </tbody>\n        </C.Table>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    background-color:#FFF;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius:10px;\n    padding:20px;\n    margin-top:-40px;\n    display: flex;\n    align-items:center;\n`;\n\nexport const MonthArea = styled.div`\n    flex:1;\n    display:flex;\n    align-items:center;\n`;\n\nexport const MonthArrow = styled.div`\n    width:40px;\n    text-align:center;\n    font-size:25px;\n    cursor:pointer;\n`;\n\nexport const MonthTitle = styled.div`\n    flex:1;\n    text-align:center;\n`;\n\nexport const ResumeArea = styled.div`\n    flex:2;\n    display:flex;\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    flex:1;\n`\n\nexport const Title = styled.div`\n    text-align:center;\n    font-weight:bold;\n    color:#888;\n    margin-bottom:5px;\n`\n\nexport const Info = styled.div<{color?:string}>`\n    text-align:center;\n    font-weight:bold;\n    color:${props => props.color ?? '#000'};\n`","import { info } from 'console'\nimport * as C from './styles'\n\n\ntype Props = {\n    title:string;\n    value:number;\n    color?:string\n}\n\nexport const ResumeItem = ({title,value,color}:Props) => {\n    return (\n        <C.Container>\n            <C.Title>{title}</C.Title>\n            <C.Info color={color}>R$ {value.toFixed(2)}</C.Info>\n        </C.Container>\n    )\n}","import * as C from './styles'\n\nimport { formatCurrentMonth } from '../../helpers/dateFilter'\nimport { ResumeItem } from '../ResumeItem'\n\ntype Props = {\n    currentMonth: string;\n    onMonthChange: (newMonth: string) => void;\n    income: number;\n    expense: number;\n}\n\nexport const InfoArea = ({ currentMonth, onMonthChange, income, expense }: Props) => {\n\n\n    const handlePrevMonth = () => {\n        let [year, month] = currentMonth.split('-');\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n        currentDate.setMonth(currentDate.getMonth() - 1);\n\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`)\n\n    }\n\n\n    const handleNextMonth = () => {\n        let [year, month] = currentMonth.split('-');\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n        currentDate.setMonth(currentDate.getMonth() + 1);\n\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`)\n\n    }\n\n    return (\n        <C.Container>\n            <C.MonthArea>\n                <C.MonthArrow onClick={handlePrevMonth}>⬅️</C.MonthArrow>\n                <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\n                <C.MonthArrow onClick={handleNextMonth}>➡️</C.MonthArrow>\n            </C.MonthArea>\n\n            <C.ResumeArea>\n                <ResumeItem title='Receitas' value={income} />\n                <ResumeItem title='Despesas' value={expense} />\n                <ResumeItem\n                    title='Balanço'\n                    value={income - expense}\n                    color={(income - expense) < 0 ? 'red' : 'green'}\n                />\n            </C.ResumeArea>\n        </C.Container>\n    )\n\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: #FFF;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 20px;\n    display: flex;\n    align-items: center;\n`;\nexport const InputLabel = styled.label`\n    flex: 1;\n    margin: 10px;\n`;\nexport const InputTitle = styled.div`\n    font-weight: bold;\n    margin-bottom: 5px;\n`;\nexport const Input = styled.input`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Select = styled.select`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Button = styled.button`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n    background-color: lightblue;\n    color: black;\n    cursor: pointer;\n    &:hover {\n        background-color: blue;\n        color: white;\n    }\n`;","import { useState } from 'react';\nimport * as C from './styles';\nimport { Item } from '../../types/Item';\n\nimport { categories } from '../../data/categories';\n\ntype Props = {\n  onAdd: (item: Item) => void;\n};\n\nexport const InputArea = ({ onAdd }: Props) => {\n  const [dateField, setDateField] = useState('');\n  const [categoryField, setCategoryField] = useState('');\n  const [titleField, setTitleField] = useState('');\n  const [valueField, setValueField] = useState(0);\n\n  let categoryKeys: string[] = Object.keys(categories);\n\n  const handleAddEvent = () => {\n    let errors: string[] = [];\n\n    if(isNaN(new Date(dateField).getTime())) {\n      errors.push('Data inválida!');\n    }\n    if(!categoryKeys.includes(categoryField)) {\n      errors.push('Categoria inválida!');\n    }\n    if(titleField === '') {\n      errors.push('Título vazio!');\n    }\n    if(valueField <= 0) {\n      errors.push('Valor inválido!');\n    }\n\n    if(errors.length > 0) {\n      alert(errors.join(\"\\n\"));\n    } else {\n      onAdd({\n        date: new Date(dateField),\n        category: categoryField,\n        title: titleField,\n        value: valueField\n      });\n      clearFields();\n    }\n  }\n\n  const clearFields = () => {\n    setDateField('');\n    setCategoryField('');\n    setTitleField('');\n    setValueField(0);\n  }\n\n  return (\n      <C.Container>\n        <C.InputLabel>\n          <C.InputTitle>Data</C.InputTitle>\n          <C.Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Categoria</C.InputTitle>\n          <C.Select value={categoryField} onChange={e => setCategoryField(e.target.value)}>\n            <>\n              <option></option>\n              {categoryKeys.map((key, index) => (\n                <option key={index} value={key}>{categories[key].title}</option>\n              ))}\n            </>\n          </C.Select>\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Título</C.InputTitle>\n          <C.Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Valor</C.InputTitle>\n          <C.Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>&nbsp;</C.InputTitle>\n          <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\n        </C.InputLabel>\n      </C.Container>\n  );\n}","import { useState, useEffect } from 'react';\n\nimport * as C from './App.styles'\n\n// types\nimport { Item } from './types/Item';\nimport { Category } from './types/Category';\n\n// data\nimport { categories } from './data/categories';\nimport { items } from './data/items';\n\n// helper\nimport { getCurrentMonth, filterListByMonth } from './helpers/dateFilter';\n\n// components\nimport { TableArea } from './components/TableArea';\nimport { InfoArea } from './components/InfoArea';\nimport { InputArea } from './components/InputArea';\n\nconst App = () => {\n\n  const [list, setList] = useState(items);\n  const [filteredList, setFilteredList] = useState<Item[]>([])\n  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth())\n  const [income, setIncome] = useState(0)\n  const [expense, setExpense] = useState(0)\n\n  useEffect(() => {\n    setFilteredList(filterListByMonth(list, currentMonth));\n  }, [list, currentMonth])\n\n  useEffect(() => {\n    let incomeCount = 0;\n    let expenseCount = 0;\n\n    for(let i in filteredList){\n      if(categories[filteredList[i].category].expense){\n        expenseCount += filteredList[i].value;\n      }else{\n        incomeCount += filteredList[i].value;\n      }\n    }\n\n    setIncome(incomeCount)\n    setExpense(expenseCount)\n\n  },[filteredList])\n\n  const handleMonthChange = (newMonth: string) => {\n    setCurrentMonth(newMonth)\n  }\n\n  const handleAddItem = (item:Item) => {\n    let newList = [...list]\n    newList.push(item)\n    setList(newList)\n  }\n\n  return (\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Sistema Financeiro</C.HeaderText>\n      </C.Header>\n\n      <C.Body>\n\n        {/* Área de informações */}\n        <InfoArea\n          currentMonth={currentMonth}\n          onMonthChange={handleMonthChange}\n          income={income}\n          expense={expense}\n        />\n\n        {/* Área de inserção */}\n        <InputArea onAdd={handleAddItem}/>\n\n        {/* Tabela de itens */}\n        <TableArea list={filteredList} />\n\n\n      </C.Body>\n\n    </C.Container>\n  );\n\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}